<?php

namespace App\Repositories\Eloquents;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use App\Repositories\Contracts\BaseRepository;

class EloquentBaseRepository implements BaseRepository
{
    protected $model;

    public function __construct(Model $model)
    {
        $this->model = $model;
    }

    public function all($columns = ['*'])
    {
        return $this->model->all($columns);
    }

    public function count()
    {
        return $this->model->count();
    }

    public function create(array $data)
    {
        return $this->model->create($data);
    }

    public function delete($ids)
    {
        return $this->model->destroy($ids);
    }

    public function doesntHave($relation)
    {
        return $this->model->doesntHave($relation);
    }

    public function find(int $id)
    {
        return $this->model->find($id);
    }

    public function firstOrCreate(array $data = [])
    {
        return $this->model->firstOrCreate($data);
    }

    public function findOrFail(int $id)
    {
        return $this->model->findOrFail($id);
    }

    public function firstOrNew(array $data = [])
    {
        return $this->model->firstOrNew($data);
    }

    public function findWhere(array $criteria)
    {
        return $this->model->where($criteria)->first();
    }

    public function get(array $columns = ['*']): Collection
    {
        return $this->model->select($columns)->get();
    }

    public function has($relation)
    {
        return $this->model->has($relation);
    }

    public function limit($limit)
    {
        return $this->model->limit($limit);
    }

    public function model()
    {
        return $this->model;
    }

    public function orderBy(string $column, $order = 'asc')
    {
        return $this->model->orderBy($column, $order);
    }

    public function select(array $columns = ['*'])
    {
        return $this->model->select($columns);
    }

    public function paginate(int $limit = 15)
    {
        return $this->model->paginate($limit);
    }

    public function query()
    {
        return $this->model->newQuery();
    }

    public function queryBuilder(): Builder
    {
        return $this->model->queryBuilder();
    }

    public function simplePaginate($limit = 15)
    {
        return $this->model->simplePaginate($limit);
    }

    public function show(int $id)
    {
        return $this->model->findOrFail($id);
    }

    public function update(int $id, array $data)
    {
        $record = $this->model->findOrFail($id);
        $record->update($data);
        return $record;
    }

    public function updateOrCreate(array $data, array $values = [])
    {
        return $this->model->updateOrCreate($data, $values);
    }

    public function where(array $criteria)
    {
        return $this->model->where($criteria);
    }

    public function whereDoesntHave($relation, $closure)
    {
        return $this->model->whereDoesntHave($relation, $closure);
    }

    public function whereExists($clause)
    {
        return $this->model->whereExists($clause);
    }

    public function whereHas($relation, $closure)
    {
        return $this->model->whereHas($relation, $closure);
    }

    public function whereIn(string $column, array $values)
    {
        return $this->model->whereIn($column, $values);
    }

    public function whereNotIn(string $column, array $values)
    {
        return $this->model->whereNotIn($column, $values);
    }

    public function whereNull(string $column)
    {
        return $this->model->whereNull($column);
    }

    public function whereNotNull(string $column)
    {
        return $this->model->whereNotNull($column);
    }

    public function with($relations)
    {
        return $this->model->with($relations);
    }

    public function withCount($relations)
    {
        return $this->model->withCount($relations);
    }
}